@using Cosmos.Chat.GPT.Constants
@using Cosmos.Chat.GPT.Services
@using Humanizer
@inject ChatService chatService
@inject IJSRuntime JSRuntime

<div class="h-100 mh-100 d-flex flex-column overflow-hidden justify-content-start">
    @if (ShowHeader)
    {
        <div class="navbar navbar-dark bg-primary">
            <div class="w-100 navbar navbar-dark bg-primary d-flex flex-row px-4 justify-content-between flex-nowrap">
                <div class="d-flex flex-row justify-content-start">
                    <i class="bi bi-plus mx-3"></i>
                     <svg version="1.0" xmlns="http://www.w3.org/2000/svg"  width="30.000000pt" height="30.000000pt" viewBox="0 0 48.000000 51.000000"  preserveAspectRatio="xMidYMid meet">  <g transform="translate(0.000000,51.000000) scale(0.100000,-0.100000)" fill="#f9f9f9" stroke="none"> <path d="M267 450 c-14 -11 -29 -30 -32 -41 -5 -14 -12 -18 -23 -14 -37 16 -61 12 -83 -11 -20 -22 -22 -28 -12 -55 8 -21 9 -39 2 -57 -16 -43 -1 -141 26 -168 19 -19 33 -22 91 -22 38 1 77 5 86 9 11 6 27 3 46 -8 27 -16 31 -16 55 -1 45 30 47 130 4 192 -17 24 -19 35 -11 65 13 46 0 95 -28 116 -32 21 -90 19 -121 -5z m86 -12 c52 -27 60 -68 21 -113 -24 -29 -25 -29 -19 -5 l6 25 -20 -25 -20 -25 35 -9 c48 -11 74 -54 71 -115 -3 -55 -12 -71 -37 -71 -21 0 -28 18 -32 85 -2 28 -8 40 -18 40 -11 0 -16 -16 -20 -60 -4 -48 -9 -61 -24 -63 -27 -5 -39 12 -38 53 1 19 0 35 -2 35 -2 0 -13 -15 -24 -34 -15 -25 -17 -33 -6 -29 8 3 14 1 14 -5 0 -5 -7 -13 -16 -16 -56 -21 -84 12 -84 100 0 65 15 92 45 80 19 -7 22 -107 3 -103 -6 1 -14 -6 -16 -15 -7 -34 18 -18 52 34 33 48 35 55 29 109 -7 67 7 111 40 127 29 14 34 14 60 0z m-159 -64 c26 -10 20 -53 -8 -60 -32 -8 -46 2 -46 30 0 35 17 44 54 30z"/> <path d="M297 393 c-11 -10 -8 -45 3 -38 6 3 10 0 10 -7 0 -8 5 -7 16 4 9 9 14 24 11 32 -7 16 -28 21 -40 9z"/> <path d="M310 250 c-11 -11 -20 -32 -19 -47 1 -28 1 -28 10 4 5 18 19 39 31 48 13 8 17 15 10 15 -6 0 -21 -9 -32 -20z"/> </g> </svg> 
                    <span class="navbar-brand mb-0 ms-1 h1">Intermountain GPT</span>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500" height="30" fill="currentColor" class="text-light">
                        <path d="M225 0c-57 0-105 35-122 87a125 125 0 0 0-69 208c-22 66 15 138 82 159 21 7 44 8 65 4a130 130 0 0 0 219-46c35-7 66-29 83-61 28-47 21-106-16-147 11-33 8-71-11-101-27-47-82-72-137-62-24-26-58-41-94-41zm0 33c22 0 43 7 61 21l-4 1-101 59c-4 2-8 8-8 14v133l-43-24V128c0-53 42-94 95-94zm122 38a94 94 0 0 1 93 109l-3-1-102-57c-4-3-11-3-16 0l-117 66v-49l97-55c14-8 30-13 48-13zM96 122v119c0 6 3 11 8 14l119 66-43 26-98-56a93 93 0 0 1 14-169zm227 30 98 55a93 93 0 0 1-15 168V258c0-6-3-11-9-14l-118-68 44-24zm-73 41 50 27v57l-50 29-49-29v-57l49-27zm79 45 43 23v113a94 94 0 0 1-155 71l3-2 101-58c5-2 8-8 8-13V238zm-29 72v49l-96 56a97 97 0 0 1-130-35 93 93 0 0 1-12-62l4 2 101 57c5 3 11 3 16 0l117-67z"/>
                    </svg>
                    <span class="navbar-brand mb-0 ms-1 h1">Azure Cosmos DB</span>
                    <i class="bi bi-plus mx-3"></i>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500" height="30" fill="currentColor" class="text-light">
                        <path d="M422 250a169 169 0 0 1-50 121c-11 11-22 20-35 27-13 8-27 14-41 18a169 169 0 0 1-152-31 303 303 0 0 1-89 15 63 63 0 0 1-37-12c-5-5-10-9-13-15s-5-12-5-19c0-11 3-21 8-32s12-21 20-31l26-29 25-23a168 168 0 0 1 53-114 166 166 0 0 1 118-47c25 0 50 5 73 16a721 721 0 0 1 85-24l29-2 22 2c8 2 14 4 21 8 6 3 11 8 14 14 4 6 6 13 6 22 0 11-3 21-8 32s-13 22-21 32a294 294 0 0 1-50 52v10l1 10zm-65-134a172 172 0 0 1 55 78l16-15a274 274 0 0 0 34-44c5-7 7-14 7-20 0-4-1-7-4-9l-8-4-11-2h-9c-14 0-27 1-41 4l-39 12zM62 369c9 0 19-1 28-3l28-6a163 163 0 0 1-37-80 284 284 0 0 0-44 54c-4 7-6 14-6 19 0 4 1 7 3 9l9 4 10 2 9 1zm89-19a789 789 0 0 0 236-133 134 134 0 0 0-50-77c-12-9-26-17-40-23s-31-8-47-8a137 137 0 0 0-99 42 137 137 0 0 0-41 99 139 139 0 0 0 41 100zm239-96c-64 49-133 89-208 118a131 131 0 0 0 68 19 137 137 0 0 0 97-40 145 145 0 0 0 43-97zM0 63c0-4 1-7 3-9s5-3 9-3a39 39 0 0 0 21-7l9-7c3-3 5-6 6-10l1-5 1-7 1-5 1-3c1-3 2-4 4-5 2-2 4-2 7-2 4 0 7 1 8 4s3 5 3 9l2 11 5 10 8 8c2 3 6 5 9 6l6 1 6 1a70 70 0 0 1 8 2l5 4 2 6c0 4-1 7-4 9-2 2-5 3-9 3a36 36 0 0 0-21 6l-8 8c-2 3-5 6-6 10l-2 10-2 10-4 5-7 2c-3 0-6-2-8-4s-3-4-3-8a40 40 0 0 0-7-21l-7-9c-3-3-6-5-10-6-3-2-7-2-11-3l-9-1c-3-1-4-3-5-5l-2-5zm500 375c0 3-1 5-3 7l-7 3-9 2a30 30 0 0 0-14 6l-7 4a43 43 0 0 0-11 28v3l-1 2-4 5-6 2c-4 0-7-1-9-3s-3-5-3-9l-3-15-8-12a38 38 0 0 0-29-12c-3 0-5-1-7-3-3-3-4-5-4-9 0-3 1-6 3-7l7-4 9-1 8-2 6-4 6-5c5-3 7-8 9-13l3-15c0-3 1-6 4-8 2-2 4-3 8-3 3 0 6 1 7 3l3 7 2 8 2 8 4 7c1 3 3 5 5 6 4 4 8 7 12 8l13 4 10 3c3 1 4 4 4 9z"/>
                    </svg>
                    <span class="navbar-brand mb-0 ms-1 h1">Azure OpenAI</span>
                </div>
                <button class="navbar-toggler border-0" @onclick="ToggleNavMenu">
                    <i class="bi bi-arrow-left-square-fill"></i>
                </button>
            </div>
        </div>
    } 
    <h6 class="px-4 display-6 text-secondary p-2">@GetChatSessionName()</h6>
    <div class="px-4 pb-4 pt-2 flex-grow-1 overflow-y-auto overflow-x-hidden align-items-stretch" id="MessagesInChatdiv">
        @if (CurrentSession is null)
        {
            <div class="alert alert-primary">               
                <div class="alert-heading">
                    <div class="spinner-border text-primary me-1" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    Loading...
                </div>
                <p class="text-nowrap mb-0 fst-italic">
                    Please wait while your chat loads.
                </p>
            </div>
        }
        else if (CurrentSession.SessionId == Interface.EMPTY_SESSION)
        {
            <div class="alert alert-warning">                
                <h4 class="alert-heading">
                    <i class="bi bi-exclamation-triangle-fill me-1" aria-hidden="true"></i>
                    No Chats Available
                </h4>
                <p class="text-nowrap mb-0 fst-italic">
                    Use the New Chat option to start a new chat.
                </p>
            </div>
        }
        else
        {
            if (_messagesInChat is null || _loadingComplete == false)
            {
                <div class="alert alert-primary">
                    <div class="alert-heading">
                        <div class="spinner-border text-primary me-1" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        Loading...
                    </div>
                    <p class="text-nowrap mb-0 fst-italic">
                        Please wait while your chat loads.
                    </p>
                </div>
            }
            else
            {
                if (_messagesInChat.Count == 0)
                {
                    <div class="alert alert-info">                
                        <h4 class="alert-heading">
                            <i class="bi bi-lightbulb-fill me-1" aria-hidden="true"></i>
                            Get Started
                        </h4>
                        <p class="text-nowrap mb-0 fst-italic">
                            Start chatting with your helpful AI assistant.
                        </p>
                    </div>
                }
                else
                {
                    <div class="toast-container position-static w-100 d-inline-flex flex-column display-flex">
                        @foreach (var msg in _messagesInChat)
                        {
                            <div class="toast fade show rounded-3 @(msg.Sender == nameof(Participants.Assistant) ? "align-self-end" : "align-self-start")">
                                <div class="toast-header @(msg.Sender == nameof(Participants.Assistant) ? "bg-success text-dark" : "bg-primary text-light")">
                                    <i class="bi @(msg.Sender == nameof(Participants.Assistant) ? "bi-robot" : "bi-person") me-1" aria-hidden="true"></i>
                                    <strong class="me-auto text-capitalize">
                                        @msg.Sender
                                    </strong>
                                    @if(msg.Tokens is not null) {
                                        <span class="me-2 badge rounded-pill bg-light">
                                            Tokens: @msg.Tokens
                                        </span>
                                    }
                                    <small>
                                        @msg.TimeStamp.Humanize()
                                    </small>
                                </div>
                                <div class="toast-body">
                                    <i class="bi bi-grip-vertical mr-2 text-black-50"></i>
                                    @{
                                        MarkupString html = new MarkupString(msg.Text.Replace("\n", "<br />"));
                                    }
                                    @html
                                </div>
                            </div>
                        }
                    </div>
                }
            }
        }            			
	</div>
    <div class="bg-primary text-light px-4 py-2 rounded-top-5 text-dark d-flex flex-column justify-content-center">
        <div class="input-group">
            <i class="bi bi-body-text input-group-text" aria-hidden="true"></i>
            <textarea class="form-control form-control-sm" id="exampleFormControlTextarea1" type="text" @bind="@UserPromptSet" @onkeydown="@Enter" @oninput="@((e) => { UserPrompt=e.Value?.ToString();})" rows="2" placeholder="<Your Message>"></textarea>
            <button type="button" class="btn btn-outline-secondary" @onclick="SubmitPromptAsync">
                <i class="bi bi-send-fill" aria-hidden="true"></i>
            </button>
        </div>
    </div>			
</div>

@code {

    [Parameter]
    public EventCallback<string> OnChatUpdated { get; set; }

    [Parameter]
    public Session? CurrentSession { get; set; }

    [Parameter]
    public bool ShowHeader { get; set; }

	[Parameter]
    public EventCallback OnNavBarVisibilityUpdated { get; set; }

    private string? UserPrompt { get; set; }

    private string? UserPromptSet { get; set; }
	
    private List<Message>? _messagesInChat;
    private static event EventHandler<Session>? _onMessagePosted;
    private bool _loadingComplete;

	async private Task ToggleNavMenu()
    {
        await OnNavBarVisibilityUpdated.InvokeAsync();
    }

    public async Task ReloadChatMessagesAsync()
    {
        if (CurrentSession is not null)
        {
            _messagesInChat = await chatService.GetChatSessionMessagesAsync(CurrentSession.SessionId);
        }
    }

    protected override void OnInitialized()
    {
        _onMessagePosted += async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                if (e.SessionId == CurrentSession?.SessionId)
                {
                    await this.ReloadChatMessagesAsync();
                    this.StateHasChanged();
                }
            });
        };
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CurrentSession is null)
        {
            return;
        }

        if (CurrentSession.SessionId != Interface.EMPTY_SESSION & CurrentSession.SessionId is not null)
        {
            _messagesInChat = await chatService.GetChatSessionMessagesAsync(CurrentSession?.SessionId);
        }

        _loadingComplete = true;
    }

    public void ChangeCurrentChatSession(Session session)
    {
        CurrentSession = session;
    }

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" && !e.ShiftKey)
        {
            await SubmitPromptAsync();
        }
    }

    private async Task SubmitPromptAsync()
    {
        if (CurrentSession?.SessionId == Interface.EMPTY_SESSION || UserPrompt == String.Empty || UserPrompt is null)
        {
            return;
        }

        if (UserPrompt != String.Empty)
        {           
            UserPromptSet = String.Empty;
        }

        await chatService.GetChatCompletionAsync(CurrentSession?.SessionId, UserPrompt);

        if(_messagesInChat?.Count == 2)
        {
            string newSessionName;
            newSessionName = await chatService.SummarizeChatSessionNameAsync(CurrentSession?.SessionId, String.Join(Environment.NewLine, _messagesInChat.Select(m => m.Text)));
            newSessionName = "New Chat";

            if (CurrentSession is not null)
            {
                CurrentSession.Name = newSessionName;
            }
        }
        await OnChatUpdated.InvokeAsync();

        if (_onMessagePosted is not null && CurrentSession is not null)
        {
            _onMessagePosted.Invoke(null, CurrentSession);
        }

        await ScrollLastChatToView();
    }

    private string GetChatSessionName() => CurrentSession switch 
    {
        null => String.Empty,
        (Session s) when s.SessionId == Interface.EMPTY_SESSION => String.Empty,
        _ => CurrentSession.Name
    };

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await ScrollLastChatToView();
    }

    /// <remarks>
    /// This is a hack to get the scroll to work.  Need to find a better way to do this.
    /// </remarks>
    private async Task ScrollLastChatToView()
    {
        await JSRuntime.InvokeAsync<bool>("scrollToLastMessage");
    }
}