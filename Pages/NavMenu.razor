@using Cosmos.Chat.GPT.Constants
@using Cosmos.Chat.GPT.Services
@inject ChatService chatService


<div class="h-100 d-flex flex-column" style="min-width: 275px;">

    <div class="flex-column navbar navbar-dark bg-primary">
        <div class="container-fluid justify-content-start">
            <div class="flex-fill">
                 <svg version="1.0" xmlns="http://www.w3.org/2000/svg"  width="30.000000pt" height="30.000000pt" viewBox="0 0 48.000000 51.000000"  preserveAspectRatio="xMidYMid meet">  <g transform="translate(0.000000,51.000000) scale(0.100000,-0.100000)" fill="#f9f9f9" stroke="none"> <path d="M267 450 c-14 -11 -29 -30 -32 -41 -5 -14 -12 -18 -23 -14 -37 16 -61 12 -83 -11 -20 -22 -22 -28 -12 -55 8 -21 9 -39 2 -57 -16 -43 -1 -141 26 -168 19 -19 33 -22 91 -22 38 1 77 5 86 9 11 6 27 3 46 -8 27 -16 31 -16 55 -1 45 30 47 130 4 192 -17 24 -19 35 -11 65 13 46 0 95 -28 116 -32 21 -90 19 -121 -5z m86 -12 c52 -27 60 -68 21 -113 -24 -29 -25 -29 -19 -5 l6 25 -20 -25 -20 -25 35 -9 c48 -11 74 -54 71 -115 -3 -55 -12 -71 -37 -71 -21 0 -28 18 -32 85 -2 28 -8 40 -18 40 -11 0 -16 -16 -20 -60 -4 -48 -9 -61 -24 -63 -27 -5 -39 12 -38 53 1 19 0 35 -2 35 -2 0 -13 -15 -24 -34 -15 -25 -17 -33 -6 -29 8 3 14 1 14 -5 0 -5 -7 -13 -16 -16 -56 -21 -84 12 -84 100 0 65 15 92 45 80 19 -7 22 -107 3 -103 -6 1 -14 -6 -16 -15 -7 -34 18 -18 52 34 33 48 35 55 29 109 -7 67 7 111 40 127 29 14 34 14 60 0z m-159 -64 c26 -10 20 -53 -8 -60 -32 -8 -46 2 -46 30 0 35 17 44 54 30z"/> <path d="M297 393 c-11 -10 -8 -45 3 -38 6 3 10 0 10 -7 0 -8 5 -7 16 4 9 9 14 24 11 32 -7 16 -28 21 -40 9z"/> <path d="M310 250 c-11 -11 -20 -32 -19 -47 1 -28 1 -28 10 4 5 18 19 39 31 48 13 8 17 15 10 15 -6 0 -21 -9 -32 -20z"/> </g>
                </svg>
                <span class="navbar-brand mb-0 ms-1 h1">Intermountain GPT</span>
            </div>
        </div>
    </div>

    <div class="flex-grow-1 flex-column justify-content-center overflow-y-auto overflow-x-hidden">
        @if (_loadingComplete == true)
        {
            <div>
                <nav class="flex-column">
                    <div class="nav-item py-2 d-grid">
                        <NavLink style="cursor:pointer" class="btn btn-sm mx-1 btn-secondary d-flex flex-row align-items start" Match="NavLinkMatch.All" @onclick="@(e => NewChat())">
                            <i class="bi bi-plus"></i>
                            <span class="flex-fill">
                                Create New Chat
                            </span>
                        </NavLink>
                    </div>
                    <div class="row row-cols-1 g-2 px-2 d-flex flex-column align-items-start">
                        @foreach (var session in ChatSessions)
                        {
                            <div class="col">
                                <div class="card @(IsActiveSession(session.SessionId) ? "bg-primary text-light" : "bg-primary opacity-50 text-light")">
                                    <div class="card-body user-select-none" role="button" @onclick="@(e => LoadChat(session.SessionId,session.Name, session.TokensUsed))">
                                        <a class="card-title text-decoration-none h6">
                                            @if (IsActiveSession(session.SessionId))
                                            {
                                                <i class="bi bi-chat-right-dots-fill me-2"></i>
                                            }
                                            <span title="@session.Name" class="ms-1">
                                                @SafeSubstring(session.Name,20)
                                            </span>
                                        </a>
                                    </div>
                                    <div class="card-footer d-flex align-items-center justify-content-between">
                                        <span class="badge bg-light me-2 user-select-none">
                                            <!-- Tokens Used: @session.TokensUsed -->
                                        </span>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenInput(session.SessionId,session.Name))">
                                                <i class="bi bi-pencil-fill me-1"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenConfirmation(session.SessionId,session.Name))">
                                                <i class="bi bi-trash-fill ms-1"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </nav>
            </div>
        }
    </div>
</div>



@if (_deletePopUpOpen)
{
    <Confirmation Caption="Delete a Chat"
        Message="@_popUpText"
        OnClose="@OnConfirmationClose"
        Type="Confirmation.Category.DeleteNot">
    </Confirmation>
}


@if (_renamePopUpOpen)
{
    <Input Caption="Rename a Chat"
        Value="@_popUpText"
        OnClose="@OnInputClose" >
    </Input>
}


@code {

    [Parameter]
    public EventCallback<Session> OnChatClicked { get; set; } = default!;

    [Parameter]
    public static List<Session> ChatSessions { get; set; } = new();

    
    [Parameter]
    public EventCallback OnThemeUpdated { get; set; }

    private string? _sessionId;
    private string? _popUpText;
    private bool _deletePopUpOpen = false;
    private bool _loadingComplete;
    private bool _renamePopUpOpen = false;

    public Session? CurrentSession;

    private static event EventHandler<string>? OnNavMenuChanged;

    async private Task ChangeTheme()
    {
        await OnThemeUpdated.InvokeAsync();
    }
    
    protected override void OnInitialized()
    {
        OnNavMenuChanged += async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                this.StateHasChanged();
                await LoadCurrentChatAsync();
            });
        };
    }

    private void OpenConfirmation(string id, string title)
    {
        _deletePopUpOpen = true;
        _sessionId = id;
        _popUpText = $"Do you want to delete the chat \"{title}\"?";
    }

    public void UpdateNavMenuDisplay(string reason = "")
    {
        if (OnNavMenuChanged is not null)
        {
            OnNavMenuChanged.Invoke(null, reason);
        }
    }

    private async Task OnConfirmationClose(bool isOk)
    {
        bool updateCurrentChat=false;

        if (CurrentSession is not null & _sessionId == CurrentSession?.SessionId)
            updateCurrentChat = true;

        if (isOk)
        {
            _deletePopUpOpen = false;
            await chatService.DeleteChatSessionAsync(_sessionId);

            _deletePopUpOpen = false;

            UpdateNavMenuDisplay("Delete");

            if (!updateCurrentChat)
                return;

            CurrentSession = new Session();
            CurrentSession.SessionId = Interface.EMPTY_SESSION;
            CurrentSession.Name = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }

            await LoadCurrentChatAsync();
        }

        _deletePopUpOpen = false;
    }

    private void OpenInput(string id, string title)
    {
        _renamePopUpOpen = true;
        _sessionId = id;
        _popUpText = title;
    }

    private async Task OnInputClose(string newName)
    {
        if (newName!="")
        {
            bool updateCurrentChat = false;

            if (_sessionId == CurrentSession?.SessionId)
            {
                updateCurrentChat = true;
            }

            await chatService.RenameChatSessionAsync(_sessionId, newName);

            _renamePopUpOpen = false;

            UpdateNavMenuDisplay("Rename");

            if (!updateCurrentChat)
            {
                return;
            }

            if (CurrentSession is not null)
            {
                CurrentSession.Name = newName;
            }
            await LoadCurrentChatAsync();
        }

        _renamePopUpOpen = false;
    }

    private async Task NewChat()
    {
        await chatService.CreateNewChatSessionAsync();

        if (ChatSessions.Count == 1)
        {
            CurrentSession = ChatSessions[0] with { };
            await LoadCurrentChatAsync();
        }

        UpdateNavMenuDisplay("Add");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (_loadingComplete == true)
            return;

        _loadingComplete = false;

        ChatSessions = await chatService.GetAllChatSessionsAsync();
        if (CurrentSession is not null && ChatSessions is not null & ChatSessions?.Count > 0)
        {
            var match = ChatSessions?.FirstOrDefault();
            if (match is not null)
            {
                CurrentSession.SessionId = match.SessionId;
                CurrentSession.Name = match.Name;
                CurrentSession.TokensUsed = match.TokensUsed;
            }
        }

        _loadingComplete = true;
        await LoadCurrentChatAsync();

    }

    private async Task<int> LoadCurrentChatAsync()
    {
        int index = 0;
        if (CurrentSession is not null & ChatSessions is not null & ChatSessions?.Count > 0)
        {
            index = ChatSessions?.FindIndex(s => s.SessionId == CurrentSession?.SessionId) ?? 0;
        }
        if (CurrentSession is null || index < 0)
        {
            CurrentSession = new Session();
            CurrentSession.SessionId = Interface.EMPTY_SESSION;
            CurrentSession.Name = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {   
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.SessionId = match.SessionId;
                    CurrentSession.Name = match.Name;
                    CurrentSession.TokensUsed = match.TokensUsed;
                }
            }            
        }

        await OnChatClicked.InvokeAsync(CurrentSession);

        return 0;
    }

    async private Task<int> LoadChat(string _sessionId, string sessionName, int? tokensUsed)
    {
        if (ChatSessions is null) return 0;

        if (CurrentSession is null)
           CurrentSession = new Session();

        CurrentSession.SessionId = _sessionId;
        CurrentSession.Name = sessionName;
        CurrentSession.TokensUsed = tokensUsed;

        await LoadCurrentChatAsync();

        return 0;
    }

    private bool IsActiveSession(string _sessionId) => CurrentSession switch
    {
        null => true,
        (Session s) when s.SessionId == _sessionId => true,
        _ => false
    };

    public string SafeSubstring(string text, int maxLength) => text switch
    {
        null => string.Empty,
        _ => text.Length > maxLength ? text.Substring(0, maxLength) + "..." : text
    };
}