@using Cosmos.Chat.GPT.Services
@inject ChatService chatService


<div class="h-100 d-flex flex-column" style="min-width: 275px;">

    <div class="flex-column navbar navbar-dark bg-primary">
        <div class="container-fluid justify-content-between">
            <div class="flex-fill">
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500" height="30" fill="currentColor" class="text-light">
                    <path d="M225 0c-57 0-105 35-122 87a125 125 0 0 0-69 208c-22 66 15 138 82 159 21 7 44 8 65 4a130 130 0 0 0 219-46c35-7 66-29 83-61 28-47 21-106-16-147 11-33 8-71-11-101-27-47-82-72-137-62-24-26-58-41-94-41zm0 33c22 0 43 7 61 21l-4 1-101 59c-4 2-8 8-8 14v133l-43-24V128c0-53 42-94 95-94zm122 38a94 94 0 0 1 93 109l-3-1-102-57c-4-3-11-3-16 0l-117 66v-49l97-55c14-8 30-13 48-13zM96 122v119c0 6 3 11 8 14l119 66-43 26-98-56a93 93 0 0 1 14-169zm227 30 98 55a93 93 0 0 1-15 168V258c0-6-3-11-9-14l-118-68 44-24zm-73 41 50 27v57l-50 29-49-29v-57l49-27zm79 45 43 23v113a94 94 0 0 1-155 71l3-2 101-58c5-2 8-8 8-13V238zm-29 72v49l-96 56a97 97 0 0 1-130-35 93 93 0 0 1-12-62l4 2 101 57c5 3 11 3 16 0l117-67z"/>
                </svg>
                <i class="bi bi-plus"></i>
                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 500 500" height="30" fill="currentColor" class="text-light">
                    <path d="M422 250a169 169 0 0 1-50 121c-11 11-22 20-35 27-13 8-27 14-41 18a169 169 0 0 1-152-31 303 303 0 0 1-89 15 63 63 0 0 1-37-12c-5-5-10-9-13-15s-5-12-5-19c0-11 3-21 8-32s12-21 20-31l26-29 25-23a168 168 0 0 1 53-114 166 166 0 0 1 118-47c25 0 50 5 73 16a721 721 0 0 1 85-24l29-2 22 2c8 2 14 4 21 8 6 3 11 8 14 14 4 6 6 13 6 22 0 11-3 21-8 32s-13 22-21 32a294 294 0 0 1-50 52v10l1 10zm-65-134a172 172 0 0 1 55 78l16-15a274 274 0 0 0 34-44c5-7 7-14 7-20 0-4-1-7-4-9l-8-4-11-2h-9c-14 0-27 1-41 4l-39 12zM62 369c9 0 19-1 28-3l28-6a163 163 0 0 1-37-80 284 284 0 0 0-44 54c-4 7-6 14-6 19 0 4 1 7 3 9l9 4 10 2 9 1zm89-19a789 789 0 0 0 236-133 134 134 0 0 0-50-77c-12-9-26-17-40-23s-31-8-47-8a137 137 0 0 0-99 42 137 137 0 0 0-41 99 139 139 0 0 0 41 100zm239-96c-64 49-133 89-208 118a131 131 0 0 0 68 19 137 137 0 0 0 97-40 145 145 0 0 0 43-97zM0 63c0-4 1-7 3-9s5-3 9-3a39 39 0 0 0 21-7l9-7c3-3 5-6 6-10l1-5 1-7 1-5 1-3c1-3 2-4 4-5 2-2 4-2 7-2 4 0 7 1 8 4s3 5 3 9l2 11 5 10 8 8c2 3 6 5 9 6l6 1 6 1a70 70 0 0 1 8 2l5 4 2 6c0 4-1 7-4 9-2 2-5 3-9 3a36 36 0 0 0-21 6l-8 8c-2 3-5 6-6 10l-2 10-2 10-4 5-7 2c-3 0-6-2-8-4s-3-4-3-8a40 40 0 0 0-7-21l-7-9c-3-3-6-5-10-6-3-2-7-2-11-3l-9-1c-3-1-4-3-5-5l-2-5zm500 375c0 3-1 5-3 7l-7 3-9 2a30 30 0 0 0-14 6l-7 4a43 43 0 0 0-11 28v3l-1 2-4 5-6 2c-4 0-7-1-9-3s-3-5-3-9l-3-15-8-12a38 38 0 0 0-29-12c-3 0-5-1-7-3-3-3-4-5-4-9 0-3 1-6 3-7l7-4 9-1 8-2 6-4 6-5c5-3 7-8 9-13l3-15c0-3 1-6 4-8 2-2 4-3 8-3 3 0 6 1 7 3l3 7 2 8 2 8 4 7c1 3 3 5 5 6 4 4 8 7 12 8l13 4 10 3c3 1 4 4 4 9z"/>
                </svg>
            </div>
            <button class="navbar-toggler border-0" @onclick="ToggleNavMenu">
                <i class="bi bi-arrow-right-square-fill"></i>
            </button>
        </div>
    </div>

    <div class="flex-grow-1 flex-column justify-content-center overflow-y-auto overflow-x-hidden">
        @if (LoadingComplete == true)
        {
            <div>
                <nav class="flex-column">
                    <div class="nav-item py-2 d-grid">
                        <NavLink style="cursor:pointer" class="btn btn-sm mx-1 btn-secondary d-flex flex-row align-items start" Match="NavLinkMatch.All" @onclick="@(e => NewChat())">
                            <i class="bi bi-plus"></i>
                            <span class="flex-fill">
                                Create New Chat
                            </span>
                        </NavLink>
                    </div>
                    <div class="row row-cols-1 g-2 px-2 d-flex flex-column align-items-start">
                        @foreach (var session in ChatSessions)
                        {
                            <div class="col">
                                <div class="card @(IsActiveSession(session.ChatSessionId) ? "bg-primary text-light" : "bg-primary opacity-50 text-light")" @onclick="@(e => LoadChat(session.ChatSessionId,session.ChatSessionName))">
                                    <div class="card-body">
                                        <a class="card-title text-decoration-none h6" @onclick="@(e => LoadChat(session.ChatSessionId,session.ChatSessionName))">
                                            @if (IsActiveSession(session.ChatSessionId))
                                            {
                                                <i class="bi bi-chat-right-dots-fill me-2"></i>
                                            }
                                            <span title="@session.ChatSessionName" class="ms-1">
                                                @SafeSubstring(session.ChatSessionName,20)
                                            </span>
                                        </a>
                                    </div>
                                    <div class="card-footer d-flex align-items-between">
                                        <span class="flex-grow-1"></span>
                                        <div class="btn-group" role="group">
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenInput(session.ChatSessionId,session.ChatSessionName))">
                                                <i class="bi bi-pencil-fill me-1"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-link text-light" @onclick="@(e => OpenConfirmation(session.ChatSessionId,session.ChatSessionName))">
                                                <i class="bi bi-trash-fill ms-1"></i>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </nav>
            </div>
        }
    </div>
</div>



@if (DeletePopUpOpen)
{
    <Confirmation Caption="Delete a Chat"
        Message="@PopUpText"
        OnClose="@OnConfirmationClose"
        Type="Confirmation.Category.DeleteNot">
    </Confirmation>
}


@if (RenamePopUpOpen)
{
    <Input Caption="Rename a Chat"
        Value="@PopUpText"
        OnClose="@OnInputClose" >
    </Input>
}


@code {

    [Parameter]
    public EventCallback<ChatSession> OnChatClicked { get; set; } = default!;

    [Parameter]
    public static List<ChatSession> ChatSessions { get; set; } = new();


    [Parameter]
    public EventCallback OnNavBarVisibilityUpdated { get; set; }

    [Parameter]
    public EventCallback OnThemeUpdated { get; set; }

    async private Task ToggleNavMenu()
    {
        await OnNavBarVisibilityUpdated.InvokeAsync();
    }

    async private Task ChangeTheme()
    {
        await OnThemeUpdated.InvokeAsync();
    }

    public ChatSession? CurrentSession;

    private string? SessionID;
    private string? PopUpText;
    private bool DeletePopUpOpen = false;

    private bool LoadingComplete;

    private static event EventHandler<string>? OnNavMenuChanged;

    protected override void OnInitialized()
    {
        OnNavMenuChanged += async (o, e) =>
        {
            await this.InvokeAsync(async () =>
            {
                this.StateHasChanged();
                await LoadCurrentChatAsync();
            });
        };

    }

    private void OpenConfirmation(string id, string title)
    {
        DeletePopUpOpen = true;
        SessionID = id;
        PopUpText = "Do you want to delete the chat \""
                  + title + "\"?";
    }

    public void UpdateNavMenuDisplay(string reason = "")
    {
        if (OnNavMenuChanged is not null)
        {
            OnNavMenuChanged.Invoke(null, reason);
        }
    }

    private async Task OnConfirmationClose(bool isOk)
    {
        bool updateCurrentChat=false;

        if (CurrentSession is not null & SessionID == CurrentSession?.ChatSessionId)
            updateCurrentChat = true;

        if (isOk)
        {
            DeletePopUpOpen = false;
            await chatService.DeleteChatSessionAsync(SessionID);

            DeletePopUpOpen = false;

            UpdateNavMenuDisplay("Delete");

            if (!updateCurrentChat)
                return;

            CurrentSession = new ChatSession();
            CurrentSession.ChatSessionId = "404";
            CurrentSession.ChatSessionName = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.ChatSessionId = match.ChatSessionId;
                    CurrentSession.ChatSessionName = match.ChatSessionName;
                }
            }

            await LoadCurrentChatAsync();
        }

        DeletePopUpOpen = false;
    }

    private bool RenamePopUpOpen = false;

    private void OpenInput(string id, string title)
    {
        RenamePopUpOpen = true;
        SessionID = id;
        PopUpText = title;
    }


    private async Task OnInputClose(string newName)
    {
        if (newName!="")
        {
            bool updateCurrentChat = false;

            if (SessionID == CurrentSession?.ChatSessionId)
            {
                updateCurrentChat = true;
            }

            await chatService.RenameChatSessionAsync(SessionID, newName);

            RenamePopUpOpen = false;

            UpdateNavMenuDisplay("Rename");

            if (!updateCurrentChat)
            {
                return;
            }

            if (CurrentSession is not null)
            {
                CurrentSession.ChatSessionName = newName;
            }
            await LoadCurrentChatAsync();
        }

        RenamePopUpOpen = false;
    }

    private async Task NewChat()
    {
        await chatService.CreateNewChatSessionAsync();

        if (ChatSessions.Count == 1)
        {
            CurrentSession = ChatSessions[0] with { };
            await LoadCurrentChatAsync();
        }

        UpdateNavMenuDisplay("Add");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (LoadingComplete == true)
            return;

        LoadingComplete = false;

        ChatSessions = await chatService.GetAllChatSessionsAsync();
        if (CurrentSession is not null && ChatSessions is not null & ChatSessions?.Count > 0)
        {
            var match = ChatSessions?.FirstOrDefault();
            if (match is not null)
            {
                CurrentSession.ChatSessionId = match.ChatSessionId;
                CurrentSession.ChatSessionName = match.ChatSessionName;
            }
        }

        LoadingComplete = true;
        await LoadCurrentChatAsync();

    }

    private async Task<int> LoadCurrentChatAsync()
    {
        int index = 0;
        if (CurrentSession is not null & ChatSessions is not null & ChatSessions?.Count > 0)
        {
            index = ChatSessions?.FindIndex(s => s.ChatSessionId == CurrentSession?.ChatSessionId) ?? 0;
        }
        if (CurrentSession is null || index<0)
        {
            CurrentSession = new ChatSession();
            CurrentSession.ChatSessionId = "404";
            CurrentSession.ChatSessionName = string.Empty;

            if (ChatSessions is not null & ChatSessions?.Count > 0)
            {   
                var match = ChatSessions?.FirstOrDefault();
                if (match is not null)
                {
                    CurrentSession.ChatSessionId = match.ChatSessionId;
                    CurrentSession.ChatSessionName = match.ChatSessionName;
                }
            }            
        }

        await OnChatClicked.InvokeAsync(CurrentSession);

        return 0;
    }

    async private Task<int> LoadChat(string sessionId, string sessionName)
    {
        if (ChatSessions is null) return 0;

        if (CurrentSession is null)
           CurrentSession = new ChatSession();

        CurrentSession.ChatSessionId = sessionId;
        CurrentSession.ChatSessionName = sessionName;            

        await LoadCurrentChatAsync();

        return 0;
    }

    private bool IsActiveSession(string sessionId)
    {
        if (CurrentSession == null)
            return true;
        else if (sessionId == CurrentSession.ChatSessionId)
            return true;
        else
            return false;
    }

    public string SafeSubstring(string text, int maxLength)
    {
        if(text is null) return string.Empty;

        return text.Length > maxLength ? text.Substring(0, maxLength)+"..." : text;
    }

}
