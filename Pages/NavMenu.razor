@using CosmosDB_ChatGPT.Services
@inject ChatService chatService


<div class="sidebar h-100 d-flex flex-column">

    <div class="flex-column top-row navbar navbar-dark">
        <div class="container-fluid navbar-brand">
            <h4 class="py-1">Cosmos DB + ChatGPT</h4>
        </div>
    </div>

    <div class=" flex-grow-1 flex-column justify-content-center overflow-auto">
        @if (LoadingComplete == true)
        {
            <div>
                <nav class="flex-column">
                    <div class="nav-item px-3">
                        <NavLink style="cursor:pointer" class="nav-link" Match="NavLinkMatch.All" @onclick="@(e => NewChat())">
                            <span class="oi oi-plus" aria-hidden="true"></span> New Chat
                        </NavLink>
                    </div>
                </nav>
            </div>
            <div class="vstack gap-3 px-3">

                @foreach (var session in ChatSessions)
                {

                    <div class="btn @highlightActiveChat(session.ChatSessionId)">

                        <div class="w-100 p-1" style="text-align:left ">
                            <a @onclick="@(e => LoadChat(session.ChatSessionId,session.ChatSessionName))">
                                <span class="oi oi-chat" aria-hidden="true"></span>
                                <span title="@session.ChatSessionName"> @SafeSubstring(session.ChatSessionName,20) </span>
                            </a>
                        </div>
                        <div style="text-align:right ;width:100%">
                            <a @onclick="@(e => OpenInput(session.ChatSessionId,session.ChatSessionName))">
                                <i class="bi bi-pencil-fill"></i>
                                <span class="oi oi-pencil" aria-hidden="true" style="color: white"></span>
                            </a>
                            <a @onclick="@(e => OpenConfirmation(session.ChatSessionId,session.ChatSessionName))">
                                <span class="oi oi-trash" aria-hidden="true" style="color: white"></span>
                            </a>
                        </div>
                    </div>
                }
        </div>
        }
    </div>
</div>



@if (ConfirmationIsOpen)
{
    <Confirmation Caption="Delete a Chat"
        Message="@UIMessageText"
        OnClose="@OnConfirmationClose"
        Type="Confirmation.Category.DeleteNot">
    </Confirmation>
}



@if (InputIsOpen)
{
    <Input Caption="Rename a Chat"
              Value="@UIMessageText"
              OnClose="@OnInputClose" >
    </Input>
}



@code {

    List<ChatSession> ChatSessions;
    public ChatSession CurrentSession;

    private string SessionID;
    private string UIMessageText;
    private bool ConfirmationIsOpen = false;

    private bool LoadingComplete;

    [Parameter]
    public EventCallback<ChatSession> OnChatClicked { get; set; }

    //[Parameter]
    //public string CurrentSessionName { get; set; }


    private void OpenConfirmation(string id, string title)
    {
        ConfirmationIsOpen = true;
        SessionID = id;
        UIMessageText = "Do you want to delete the chat \""
                  + title + "\"?";
    }

    private async Task OnConfirmationClose(bool isOk)
    {
        bool loadFirst=false;

        if (CurrentSession!=null & SessionID == CurrentSession.ChatSessionId)
            loadFirst = true;

        if (isOk)
        {
            ConfirmationIsOpen = false;
            await chatService.DeleteChatSessionAsync(SessionID);
            
            ConfirmationIsOpen = false;

            if (!loadFirst)
                return;
            
            CurrentSession = new ChatSession();
            CurrentSession.ChatSessionId = "404";
            CurrentSession.ChatSessionName = string.Empty;

            if (ChatSessions != null & ChatSessions.Count > 0)
            {
                CurrentSession.ChatSessionId = ChatSessions.FirstOrDefault().ChatSessionId;
                CurrentSession.ChatSessionName = ChatSessions.FirstOrDefault().ChatSessionName;
            }

            await LoadCurrentChat();
            // Inform blazor the UI needs updating
            InvokeAsync(StateHasChanged);

        }

        ConfirmationIsOpen = false;
    }

    private bool InputIsOpen = false;

    private void OpenInput(string id, string title)
    {
        InputIsOpen = true;
        SessionID = id;
        UIMessageText = title;
    }


    private async Task OnInputClose(string newName)
    {
        if (newName!="")
        {
            bool loadFirst = false;

            if (SessionID == CurrentSession.ChatSessionId)
                loadFirst = true;

            await chatService.RenameChatSessionAsync(SessionID,newName);

            InputIsOpen = false;

            if (!loadFirst)
                return;
            
            CurrentSession.ChatSessionName = newName;
            await LoadCurrentChat();

        }
        InputIsOpen = false;
    }

    private async Task NewChat()
    {
        await chatService.CreateNewChatSession();

        if (ChatSessions.Count == 1)
        {
            CurrentSession = ChatSessions[0];
            await LoadCurrentChat();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (LoadingComplete == true)
            return;

        LoadingComplete = false;

        ChatSessions = await chatService.GetAllChatSessionsAsync();
        if (CurrentSession != null & ChatSessions != null & ChatSessions.Count > 0)
        {
            CurrentSession.ChatSessionId = ChatSessions.FirstOrDefault().ChatSessionId;
            CurrentSession.ChatSessionName = ChatSessions.FirstOrDefault().ChatSessionName;
        }

        LoadingComplete = true;
        LoadCurrentChat();

    }

    async private Task<int> LoadCurrentChat()
    {

        if (CurrentSession == null)
        {
            CurrentSession = new ChatSession();
            CurrentSession.ChatSessionId = "404";
            CurrentSession.ChatSessionName = string.Empty;

            if (ChatSessions != null & ChatSessions.Count > 0)
            {                
        
                CurrentSession.ChatSessionId = ChatSessions.FirstOrDefault().ChatSessionId;
                CurrentSession.ChatSessionName = ChatSessions.FirstOrDefault().ChatSessionName;
            }            
        }

        await OnChatClicked.InvokeAsync(CurrentSession);

        return 0;
    }

    async private Task<int> LoadChat(string sessionId, string sessionName)
    {
        if (ChatSessions == null) return 0;

        if (CurrentSession == null)
           CurrentSession = new ChatSession();

        CurrentSession.ChatSessionId = sessionId;
        CurrentSession.ChatSessionName = sessionName;            

        await LoadCurrentChat();

        return 0;
    }

    private string highlightActiveChat(string sessionId)
    {
        if (CurrentSession == null)
            return "btn-primary";

        if (sessionId != CurrentSession.ChatSessionId)
            return "btn-primary";
        else
            return "btn-info";
    }

    public string SafeSubstring(string text, int maxLength)
    {
        if(text == null) return string.Empty;

        return text.Length > maxLength ? text.Substring(0, maxLength)+"..." : text;
    }

}
